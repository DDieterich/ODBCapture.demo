
--
--  Comprehensive Data Loader script for PM.PRINT_MEDIA data
--
-- Command Line Parameters:
--   1 - SYSTEM/password@TNSALIAS
--       i.e. pass the username and password for the SYSTEM user
--            and the TNSALIAS for the connection to the database.
--       The Data Load installation requires this connection information.
--

prompt
prompt Disable Triggers and Foreign Keys
declare
   procedure run_sql (in_sql in varchar2) is begin
      dbms_output.put_line(in_sql || ';');
      execute immediate in_sql;
   exception when others then
      dbms_output.put_line('-- ' || SQLERRM || CHR(10));
   end run_sql;
begin
   for buff in (select owner, trigger_name
                 from  dba_triggers
                 where table_owner = 'PM'
                  and  table_name = 'PRINT_MEDIA'
                 order by owner, trigger_name)
   loop
      run_sql('alter trigger "' || buff.owner        || '"' ||
                           '."' || buff.trigger_name || '" DISABLE');
   end loop;
   for buff in (select constraint_name
                 from  dba_constraints
                 where constraint_type = 'R'
                  and  owner = 'PM'
                  and  table_name = 'PRINT_MEDIA'
                 order by constraint_name)
   loop
      run_sql('alter table "PM"."PRINT_MEDIA"' ||
              ' DISABLE constraint "' || buff.constraint_name || '"');
   end loop;
   for buff in (select owner, index_name
                 from  dba_indexes
                 where index_type = 'DOMAIN'
                  and  table_owner = 'PM'
                  and  table_name = 'PRINT_MEDIA'
                 order by owner, index_name)
   loop
      run_sql('alter index "' || buff.owner || '"."' || buff.index_name || '"' ||
              ' DISABLE');
   end loop;
end;
/

-- Additional file extensions
--   .bad - Bad Records
--   .dsc - Discard Records
--   .log - Log File

prompt
prompt sqlldr_control=PM/PRINT_MEDIA.ctl
host sqlldr '&1.' control=PM/PRINT_MEDIA.ctl data=PM/PRINT_MEDIA.csv log=PM/PRINT_MEDIA.log silent=HEADER,FEEDBACK

begin
   if '&_RC.' != '0' then
      raise_application_error(-20000, 'Control file "PM/PRINT_MEDIA.ctl" returned error: &_RC.');
   end if;
end;
/

declare
   l_blob          blob;
   the_blob        blob;
   cnt             pls_integer;
   procedure b64_decode
         (in_blob  in BLOB)
   is
      BASE64_ENCODE_HEADER      constant varchar2(30) := '(Base64 with Linefeeds)';
      SPLIT_LEN              constant pls_integer  := 32764;    -- Must be divisible by 4
      header_txt    varchar2(128);
      len_blob      pls_integer;
      ptr           pls_integer;
   begin
      dbms_lob.trim(l_blob, 0);
      dbms_lob.trim(the_blob, 0);
      ----------------------------------------
      -- Check incoming BLOB sizes (and return if needed)
      if in_blob is null then return; end if;
      len_blob := length(in_blob);
      if len_blob = 0 then return; end if;
      ----------------------------------------
      -- Check for BASE64_ENCODE_HEADER in in_BLOB
      header_txt := utl_raw.cast_to_varchar2(dbms_lob.substr(in_blob
                                                            ,length(BASE64_ENCODE_HEADER)
                                                            ,1)                       );
      if header_txt != BASE64_ENCODE_HEADER
      then
         raise_application_error(-20000, 'BASE64_ENCODE_HEADER missing from data: ' || header_txt);
      end if;
      ----------------------------------------
      -- Create "L_BLOB" after removing BASE64_ENCODE_HEADER, Carriage Returns, and Line Feeds
      ptr := 1 + length(BASE64_ENCODE_HEADER);  -- Skip over the header
      while ptr <= len_blob
      loop
         dbms_lob.append(l_blob
                        ,utl_raw.translate(dbms_lob.substr(in_blob
                                                          ,SPLIT_LEN
                                                          ,ptr)
                                          ,hextoraw('000D0A')       -- NULL, Carriage Return, Line Feed
                                          ,hextoraw('00')   )   );  -- NULL
         ptr := ptr + SPLIT_LEN;
      end loop;
      len_blob := length(l_blob);
      ----------------------------------------
      --  Create "THE_BLOB" after Base64 Decoding
      ptr := 1;
      while ptr <= len_blob
      loop
         dbms_lob.append(the_blob
                        ,UTL_ENCODE.BASE64_DECODE(dbms_lob.substr(l_blob
                                                                 ,SPLIT_LEN
                                                                 ,ptr)   )   );
         ptr := ptr + SPLIT_LEN;
      end loop;
   end b64_decode;
begin
   dbms_output.put_line('Decode Binary Data');
   dbms_output.put_line('------------------');
   dbms_lob.createtemporary(l_blob, true);
   dbms_lob.createtemporary(the_blob, true);
   -- Decode Binary Data for column AD_COMPOSITE
   cnt := 0;
   for buff in (select ROWID RID, "AD_COMPOSITE"
                 from  "PM"."PRINT_MEDIA"
                 for update of "AD_COMPOSITE")
   loop
      b64_decode(buff."AD_COMPOSITE");
      -- This overwrites the Base64 Encoded String with the original binary data
      update "PM"."PRINT_MEDIA"
        set  "AD_COMPOSITE" = the_blob
       where rowid = buff.rid;
      cnt := cnt + 1;
   end loop;
   dbms_output.put_line(cnt || ' "AD_COMPOSITE" updates.');
   -- Decode Binary Data for column AD_HEADER
   cnt := 0;
   DECLARE
      adheader_typ_buff  pm.adheader_typ;
   BEGIN
      for buff in (select ROWID RID, "AD_HEADER"
                    from  "PM"."PRINT_MEDIA"
                    where "AD_HEADER" is not null
                    for update of "AD_HEADER")
      loop
         adheader_typ_buff := buff."AD_HEADER";
         -- This overwrites the Base64 Encoded String with the original binary data
         b64_decode(adheader_typ_buff.logo);
         adheader_typ_buff.logo := the_blob;
         update "PM"."PRINT_MEDIA"
           set  "AD_HEADER" = adheader_typ_buff
          where rowid = buff.rid;
         cnt := cnt + 1;
      end loop;
   END;
   dbms_output.put_line(cnt || ' "AD_HEADER" updates.');
   -- Decode Binary Data for column AD_PHOTO
   cnt := 0;
   for buff in (select ROWID RID, "AD_PHOTO"
                 from  "PM"."PRINT_MEDIA"
                 where "AD_PHOTO" is not null
                 for update of "AD_PHOTO")
   loop
      b64_decode(buff."AD_PHOTO");
      -- This overwrites the Base64 Encoded String with the original binary data
      update "PM"."PRINT_MEDIA"
        set  "AD_PHOTO" = the_blob
       where rowid = buff.rid;
      cnt := cnt + 1;
   end loop;
   dbms_output.put_line(cnt || ' "AD_PHOTO" updates.');
   -- Decode Binary Data for column AD_TEXTDOCS_NTAB
   cnt := 0;
   DECLARE
      textdoc_tab_buff  pm.textdoc_tab;
   BEGIN
      for buff in (select ROWID RID, "AD_TEXTDOCS_NTAB"
                    from  "PM"."PRINT_MEDIA"
                    for update of "AD_TEXTDOCS_NTAB")
      loop
         textdoc_tab_buff := buff."AD_TEXTDOCS_NTAB";
         for i in 1 .. textdoc_tab_buff.COUNT
         loop
            if textdoc_tab_buff.EXISTS(i)
            then
               -- This overwrites the Base64 Encoded String with the original binary data
               b64_decode(textdoc_tab_buff(i).formatted_doc);
               textdoc_tab_buff(i).formatted_doc := the_blob;
               cnt := cnt + 1;
            end if;
         end loop;
         update "PM"."PRINT_MEDIA"
           set  "AD_TEXTDOCS_NTAB" = textdoc_tab_buff
          where rowid = buff.rid;
      end loop;
   END;
   dbms_output.put_line(cnt || ' "AD_TEXTDOCS_NTAB" updates.');
   dbms_lob.freetemporary(l_blob);
   dbms_lob.freetemporary(the_blob);
end;
/

commit;

declare
   cnt    pls_integer := 0;
begin
   dbms_output.put_line('Decode UNISTR Data');
   dbms_output.put_line('------------------');
   -- Decode UNISTR Data for column AD_FLTEXTN
   for buff in (select ROWID RID, "AD_FLTEXTN"
                 from  "PM"."PRINT_MEDIA"
                 for update of "AD_FLTEXTN")
   loop
      -- This overwrites the UNISTR Encoded String with the original UNICODE data
      update "PM"."PRINT_MEDIA"
        set  "AD_FLTEXTN" = UNISTR(to_char("AD_FLTEXTN"))
       where rowid = buff.rid;
      cnt := cnt + 1;
   end loop;
   dbms_output.put_line(cnt || ' "AD_FLTEXTN" updates.');
end;
/

commit;

